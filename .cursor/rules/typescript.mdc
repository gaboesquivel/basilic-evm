---
description: TypeScript coding standards and best practices
globs: "**/*.{ts,tsx}"
---

# TypeScript Best Practices

## Core Principles

- Use the function keyword for pure functions; omit semicolons.
- Prefer TypeScript over JavaScript and interfaces over types.
- Avoid enums, use maps or union types instead.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Follow the RORO (Receive an Object, Return an Object) pattern for function arguments and return values.

## Error Handling

- Fail fast: Handle errors early using guard clauses and early returns.
- Place the happy path last for improved readability.
- Avoid unnecessary else statements; use if-return instead.
- Use preconditions to check for invalid states upfront.
- Throw errors from @repo/errors to maintain consistency.

## File Structure

Alwyas maintain a structured and logical order when organizing files within a project. Follow this hierarchy:

1. **Main Component** – The primary component that orchestrates the logic and renders subcomponents.  
2. **Subcomponents** – Smaller, reusable components that support the main component.  
3. **Helpers & Utilities** – Functions or modules that provide reusable logic and utilities.  
4. **Static Content** – Non-code assets such as constants, images, or localization files.  
5. **Types & Interfaces** – Type definitions for TypeScript to ensure type safety and maintain consistency.  

This order improves readability, maintainability, and scalability.

```tsx
// Export order: main component -> subcomponents -> helpers -> content -> types
export function MainComponent() {
  return (
    <div className="flex flex-col gap-4">
      <h1>{content.title}</h1>
      <SubComponent message={content.welcome} />
      <span>{formatMessage(content.welcome)}</span>
    </div>
  )
}

function SubComponent({ message }: SubComponentProps) {
  return <p>{message}</p>
}

function formatMessage(message: string) {
  return `${message} (${new Date().getFullYear()})`
}

const content = {
  title: "Main Component",
  welcome: "Welcome to our application"
} as const

interface SubComponentProps {
  message: string
}
``` 