// Generated by ts-to-zod
import { z } from 'zod'
import type { Json } from './supa.types'

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
)

export const ponderMetaRowSchema = z.object({
  key: z.string(),
  value: jsonSchema.nullable(),
})

export const ponderMetaInsertSchema = z.object({
  key: z.string(),
  value: jsonSchema.optional().nullable(),
})

export const ponderMetaUpdateSchema = z.object({
  key: z.string().optional(),
  value: jsonSchema.optional().nullable(),
})

export const ponderMetaRelationshipsSchema = z.tuple([])

export const ponderStatusRowSchema = z.object({
  block_number: z.number().nullable(),
  block_timestamp: z.number().nullable(),
  network_name: z.string(),
  ready: z.boolean(),
})

export const ponderStatusInsertSchema = z.object({
  block_number: z.number().optional().nullable(),
  block_timestamp: z.number().optional().nullable(),
  network_name: z.string(),
  ready: z.boolean(),
})

export const ponderStatusUpdateSchema = z.object({
  block_number: z.number().optional().nullable(),
  block_timestamp: z.number().optional().nullable(),
  network_name: z.string().optional(),
  ready: z.boolean().optional(),
})

export const ponderStatusRelationshipsSchema = z.tuple([])

export const reorgUserRowSchema = z.object({
  address: z.string(),
  checkpoint: z.string(),
  name: z.string().nullable(),
  operation: z.number(),
  operation_id: z.number(),
})

export const reorgUserInsertSchema = z.object({
  address: z.string(),
  checkpoint: z.string(),
  name: z.string().optional().nullable(),
  operation: z.number(),
  operation_id: z.number().optional(),
})

export const reorgUserUpdateSchema = z.object({
  address: z.string().optional(),
  checkpoint: z.string().optional(),
  name: z.string().optional().nullable(),
  operation: z.number().optional(),
  operation_id: z.number().optional(),
})

export const reorgUserRelationshipsSchema = z.tuple([])

export const userRowSchema = z.object({
  address: z.string(),
  name: z.string().nullable(),
})

export const userInsertSchema = z.object({
  address: z.string(),
  name: z.string().optional().nullable(),
})

export const userUpdateSchema = z.object({
  address: z.string().optional(),
  name: z.string().optional().nullable(),
})

export const userRelationshipsSchema = z.tuple([])
